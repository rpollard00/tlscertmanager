@page "/dashboard"
@using System.Runtime.InteropServices.JavaScript
@using System.Text.Json.Serialization
@using BlazorUI.Services
@using Core.Dtos
@using Microsoft.EntityFrameworkCore.Query
@inject StateContainer StateContainer
@inject NavigationManager Nav
@inject HttpClient Http

<PageTitle>Certificate Dashboard</PageTitle>
@if (Certificates is null)
{
    <p>Loading...</p> 
}
else
{
    <table>
        <thead>
            <th>Subject Name</th>
            <th>Subject Alternate Names</th>
            <th>Crypto Algorithm</th>
            <th>Issuer</th>
            <th>Is Expiring</th>
            <th>Issue Date</th>
            <th>Expiration Date</th>
        </thead>
    @foreach (var cert in Certificates)
    {
        <tr class="cert-summary">
            <td>@cert.SubjectName</td>
            <td>@cert.SubjectAlternateNames.Aggregate("", (curr, next) => $"{curr}, {next}")</td>
            <td>@cert.CryptoAlgorithm</td>
            <td>@cert.Issuer</td>
            <td>@cert.IsExpiring.ToString()</td>
            <td>@FormatDate(cert.IssueDate)</td>
            <td>@FormatDate(cert.ExpirationDate)</td>
        </tr>
    }
    </table>
}

@code {
    private CertificateDto[]? Certificates { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        if (!StateContainer.IsLoggedIn)
        {
            Nav.NavigateTo("/");
        }

        try
        {
            var response = await Http.GetFromJsonAsync<CertificateResponse>("CertificateService");
            Certificates = response.Result;
        }
        catch
        {
            Console.WriteLine("Unable to retrieve Certificate Date");
        }
        
    }

    string FormatDate(long rawDate)
    {
        return DateTimeOffset.FromUnixTimeMilliseconds(rawDate).ToString();
    }
    public class CertificateResponse
    {
        public CertificateDto[]? Result { get; set; }
    }


}